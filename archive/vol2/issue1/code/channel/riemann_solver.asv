%% Calculates the flux through a surface
%
% This function computes the flux through the three surfaces 
% add more here 
%
%
% current_tri_info is a 4 vector that is
% current_tri_info(1) is the label
% current_tri_info(2,3,4) are h,u,v respectively
%
% adj_tri_info is a 4x3 matrix that is the same as above except with labels
% 1,2,3 to distinguish the three sides
% 
%
%%

function interface = riemann_solver(current_tri_info, T, adj_tri_info)

%gravity
g=9.81;
%convenient definition
c = sqrt(g*current_tri_info(2));
%index of the triangle 
tri_index = current_tri_info(1);

%calculate the flux through each of the three surfaces
for i = 1:3

    %compute the Roe average state, eq 5 of A&C
	h_r = (current_tri_info(2) + adj_tri_info(i,2))/2;
	u_r = (current_tri_info(3) + adj_tri_info(i,3))/2;
	v_r = (current_tri_info(4) + adj_tri_info(i,4))/2;
    %this is Q^{+}_{i,j}-Q^{-}_{i,j} 
	q_r = [h_r h_r*u_r h_r*v_r];
	
	n_x = T(2*i, tri_index);
	n_y = T(2*i+1, tri_index);
	
    %compute the right eigenvector matrix, eq 8 of A&C
	R = [0, 1, 1; n_y, u_r - c*n_x, u + c*n_x; -n_x, v_r - c*n_y, v_r + c*n_y];
    %compute the left eigenvector matrix, eq 9 of A&C
	L = [ -(u_r*n_y - v_r*n_x), n_y, -n_x; (u_r*n_y + v_r*n_x)/(2*c) + 1/2, -n_x/(2*c), -n_y/(2*c); -(u_r*n_x + v_r*n_y)/(2*c) + 1/2, n_x/(2*c), n_y/(2*c)];
    %compute the eigenvalue matrix, eq 7of A&C
	Lambda = [abs(u_r*n_x + v_r*n_y), 0, 0; 0, abs(u_r*n_x + v_r*n_y - c), 0; 0, 0, abs(u_r*n_x + v_r*n_y + c)];
	
	%F = J^xn_x + J^yn_y
	
	fplus = jx(adj_tri_info(i,2), adj_tri_info(i,3), adj_tri_info(i,4)).*n_x + jy(adj_tri_info(i,2), adj_tri_info(i,3), adj_tri_info(i,4)).*n_y;
	fminus = jx(current_tri_info(2), current_tri_info(3), current_tri_info(4)).*n_x + jy(current_tri_info(2), current_tri_info(3), current_tri_info(4)).*n_y;
	interface(i,:) = (1/2)*(fplus + fminus) - R*Lambda*L*q_r;
end;